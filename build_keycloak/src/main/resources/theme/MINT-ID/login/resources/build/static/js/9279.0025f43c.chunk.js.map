{"version":3,"file":"static/js/9279.0025f43c.chunk.js","mappings":"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","sources":["login/pages/RegisterUserProfile.tsx"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { clsx } from 'keycloakify/tools/clsx'\nimport type { PageProps } from 'keycloakify/login/pages/PageProps'\nimport { useGetClassName } from 'keycloakify/login/lib/useGetClassName'\nimport { SubmitHandler, useForm } from 'react-hook-form'\nimport { useFormValidation } from 'keycloakify/login/lib/useFormValidation'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport * as yup from 'yup'\n\nimport type { KcContext } from '../kcContext'\nimport type { I18n } from '../i18n'\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: 'register-user-profile.ftl' }>, I18n>) {\n  const { kcContext, i18n, doUseDefaultCss, Template, classes } = props\n\n  const agreementLabelRef = useRef(null)\n\n  const [agreementChecked, setAgreementChecked] = useState(false)\n\n  const { getClassName } = useGetClassName({\n    doUseDefaultCss,\n    classes,\n  })\n\n  const { url, messagesPerField, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext\n\n  const { msg, msgStr } = i18n\n  const { registrationEmailAsUsername } = realm\n\n  const {\n    attributesWithPassword,\n    formValidationState: { fieldStateByAttributeName },\n  } = useFormValidation({ kcContext, i18n })\n  const organizationNameAttribute = attributesWithPassword.find((attr) => attr.name === 'organizationName')\n\n  const schema = useMemo(\n    () =>\n      yup.object({\n        firstName: yup.string().required(msgStr('error-empty')),\n        lastName: yup.string().required(msgStr('error-empty')),\n        organizationName: yup.string(),\n        email: yup.string().email(msgStr('error-invalid-email')).required(msgStr('error-empty')),\n        username: registrationEmailAsUsername ? yup.string() : yup.string().required(msgStr('error-empty')),\n        password: yup.string().required(msgStr('error-empty')),\n        'password-confirm': yup\n          .string()\n          .required(msgStr('error-empty'))\n          .oneOf([yup.ref('password')], 'Your passwords do not match.'),\n      }),\n    [registrationEmailAsUsername]\n  )\n\n  const {\n    formState: { errors, isDirty },\n    handleSubmit,\n    register: registerField,\n    unregister: unregisterField,\n  } = useForm({\n    defaultValues: {\n      firstName: fieldStateByAttributeName['firstName']?.value ?? '',\n      lastName: fieldStateByAttributeName['lastName']?.value ?? '',\n      organizationName: fieldStateByAttributeName['organizationName']?.value ?? '',\n      email: fieldStateByAttributeName['email']?.value ?? '',\n      username: registrationEmailAsUsername ? undefined : fieldStateByAttributeName['username']?.value ?? '',\n      password: '',\n      'password-confirm': '',\n    },\n    resolver: yupResolver(schema),\n  })\n\n  useEffect(() => {\n    const observer = new MutationObserver((mutations, mutationInstance) => {\n      const termsOfUseLink = document.querySelector<HTMLAnchorElement>('a#terms-of-use')\n      const privacyPolicy = document.querySelector<HTMLAnchorElement>('a#privacy-policy')\n      if (termsOfUseLink && privacyPolicy) {\n        termsOfUseLink.setAttribute('href', '/nutzungsbedingungen')\n        termsOfUseLink.setAttribute('target', '_blank')\n        termsOfUseLink.style.color = '#252131'\n        termsOfUseLink.style.fontWeight = 'bold'\n        termsOfUseLink.style.textDecoration = 'underline'\n        termsOfUseLink.innerHTML = msgStr('termsTitle')\n\n        privacyPolicy.setAttribute('href', '/datenschutz')\n        privacyPolicy.setAttribute('target', '_blank')\n        privacyPolicy.style.color = '#252131'\n        privacyPolicy.style.fontWeight = 'bold'\n        privacyPolicy.style.textDecoration = 'underline'\n        privacyPolicy.innerHTML = msgStr('privacyPolicyTitle')\n\n        mutationInstance.disconnect()\n      }\n    })\n    observer.observe(document, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    })\n\n    document.body.classList.add('register')\n\n    return () => {\n      observer.disconnect()\n      document.body.classList.remove('register')\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!registrationEmailAsUsername) {\n      registerField('username')\n    } else {\n      unregisterField('username')\n    }\n  }, [registrationEmailAsUsername, registerField, unregisterField])\n\n  const submit: SubmitHandler<yup.InferType<typeof schema>> = (_values, event) => {\n    event?.target.submit()\n  }\n\n  return (\n      <Template\n        {...{ kcContext, i18n, doUseDefaultCss, classes }}\n        displayInfo\n        headerNode={msg('registerTitle')}\n        infoNode={\n          <div id=\"back-to-login\" className='flex items-center justify-center !p-0'>\n            <span className='text-lg'>\n              {msg('alreadyHaveAccount')}\n              <a href={url.loginUrl} className=\"kc-link ml-2 \">\n                {msg('doLogIn')}\n              </a>\n            </span>\n          </div>\n        }\n      >\n        <form id=\"kc-register-form\" className={getClassName('kcFormClass')} onSubmit={handleSubmit(submit)} action={url.registrationAction} method=\"post\">\n          <div\n            className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('firstName', getClassName('kcFormGroupErrorClass')), {\n              [getClassName('kcFormGroupErrorClass')]: !!errors.firstName,\n            })}\n          >\n            <div className={getClassName('kcInputWrapperClass')}>\n              <input\n                {...registerField('firstName')}\n                type=\"text\"\n                id=\"firstName\"\n                className={clsx(getClassName('kcInputClass'), 'w-full')}\n                placeholder={msgStr('firstName') + '*'}\n              />\n            </div>\n          </div>\n\n          <div\n            className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('lastName', getClassName('kcFormGroupErrorClass')), {\n              [getClassName('kcFormGroupErrorClass')]: !!errors.lastName,\n            })}\n          >\n            <div className={getClassName('kcInputWrapperClass')}>\n              <input {...registerField('lastName')} type=\"text\" id=\"lastName\" className={clsx(getClassName('kcInputClass'), 'w-full')} placeholder={msgStr('lastName') + '*'} />\n            </div>\n          </div>\n          {!!organizationNameAttribute && (\n            <div className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('organizationName', getClassName('kcFormGroupErrorClass')))}>\n              <div className={getClassName('kcInputWrapperClass')}>\n                <input\n                  {...registerField('organizationName')}\n                  type=\"text\"\n                  id=\"organizationName\"\n                  className={clsx(getClassName('kcInputClass'), 'w-full')}\n                  placeholder={msgStr('organizationName')}\n                />\n              </div>\n            </div>\n          )}\n          <div\n            className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('email', getClassName('kcFormGroupErrorClass')), {\n              [getClassName('kcFormGroupErrorClass')]: !!errors.email,\n            })}\n          >\n            <div className={getClassName('kcInputWrapperClass')}>\n              <input\n                {...registerField('email')}\n                type=\"text\"\n                id=\"email\"\n                className={clsx(getClassName('kcInputClass'), 'w-full')}\n                autoComplete=\"email\"\n                placeholder={msgStr('email') + '*'}\n              />\n            </div>\n          </div>\n          {!realm.registrationEmailAsUsername && (\n            <div\n              className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('username', getClassName('kcFormGroupErrorClass')), {\n                [getClassName('kcFormGroupErrorClass')]: !!errors.username,\n              })}\n            >\n              <div className={getClassName('kcInputWrapperClass')}>\n                <input\n                  {...registerField('username')}\n                  type=\"text\"\n                  id=\"username\"\n                  className={clsx(getClassName('kcInputClass'), 'w-full')}\n                  name=\"username\"\n                  defaultValue=\"\"\n                  autoComplete=\"username\"\n                  placeholder={msgStr('username') + '*'}\n                />\n              </div>\n            </div>\n          )}\n          {passwordRequired && (\n            <>\n              <div\n                className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('password', getClassName('kcFormGroupErrorClass')), {\n                  [getClassName('kcFormGroupErrorClass')]: !!errors.password,\n                })}\n              >\n                <div className={getClassName('kcInputWrapperClass')}>\n                  <input\n                    {...registerField('password')}\n                    type=\"password\"\n                    id=\"password\"\n                    className={clsx(getClassName('kcInputClass'), 'w-full')}\n                    autoComplete=\"new-password\"\n                    placeholder={msgStr('password') + '*'}\n                  />\n                </div>\n              </div>\n\n              <div\n                className={clsx(getClassName('kcFormGroupClass'), messagesPerField.printIfExists('password-confirm', getClassName('kcFormGroupErrorClass')), {\n                  [getClassName('kcFormGroupErrorClass')]: !!errors['password-confirm'],\n                })}\n              >\n                <div className={getClassName('kcInputWrapperClass')}>\n                  <input\n                    {...registerField('password-confirm')}\n                    type=\"password\"\n                    id=\"password-confirm\"\n                    className={clsx(getClassName('kcInputClass'), 'w-full')}\n                    placeholder={msgStr('passwordConfirm') + '*'}\n                  />\n                </div>\n              </div>\n            </>\n          )}\n          <div className={getClassName('kcFormGroupClass')}>\n            <div className={getClassName('kcInputWrapperClass')}>\n              <div id=\"kc-agreement\">\n                <div>\n                  <input\n                    id=\"agreement\"\n                    name=\"agreement\"\n                    type=\"checkbox\"\n                    checked={agreementChecked}\n                    onChange={(event) => setAgreementChecked(event.target.checked)}\n                    required={isDirty && !Object.keys(errors).length}\n                  />\n                </div>\n                <div>\n                  <label ref={agreementLabelRef} htmlFor=\"agreement\">\n                    {msg('registerTermsAgreement')} {msg('registerPrivacyPolicyAgreement')}\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          {recaptchaRequired && (\n            <div className=\"form-group\">\n              <div className={getClassName('kcInputWrapperClass')}>\n                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n              </div>\n            </div>\n          )}\n          {!!Object.keys(errors).length && (\n            <div className=\"kcFormError\">\n              {errors.firstName?.message ??\n                errors.lastName?.message ??\n                errors.email?.message ??\n                errors.password?.message ??\n                errors['password-confirm']?.message ??\n                ''}\n            </div>\n          )}\n          <div className={getClassName('kcFormGroupClass')}>\n            <div id=\"kc-form-buttons\" className={getClassName('kcFormButtonsClass')}>\n              <button className={clsx(getClassName('kcButtonClass'), getClassName('kcButtonPrimaryClass'))} id=\"kc-register\" type=\"submit\">\n                {msgStr('doRegister')}\n              </button>\n              <button className={clsx(getClassName('kcButtonClass'), getClassName('kcButtonDefaultClass'))} onClick={() => window.history.back()}>\n                {msgStr('doCancel')}\n              </button>\n            </div>\n          </div>\n        </form>\n      </Template>\n  )\n}\n"],"names":["RegisterUserProfile","props","_fieldStateByAttribut","_fieldStateByAttribut2","_fieldStateByAttribut3","_fieldStateByAttribut4","_fieldStateByAttribut5","_fieldStateByAttribut6","_fieldStateByAttribut7","_fieldStateByAttribut8","_fieldStateByAttribut9","_fieldStateByAttribut10","_ref","_ref2","_ref3","_ref4","_errors$firstName$mes","_errors$firstName","_errors$lastName","_errors$email","_errors$password","_errors$passwordConf","kcContext","i18n","doUseDefaultCss","Template","classes","agreementLabelRef","useRef","_useState","useState","_useState2","_slicedToArray","agreementChecked","setAgreementChecked","getClassName","useGetClassName","url","messagesPerField","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","registrationEmailAsUsername","_useFormValidation","useFormValidation","attributesWithPassword","fieldStateByAttributeName","formValidationState","organizationNameAttribute","find","attr","name","schema","useMemo","yup","firstName","required","lastName","organizationName","email","username","password","oneOf","_useForm","useForm","defaultValues","value","undefined","resolver","yupResolver","_useForm$formState","formState","errors","isDirty","handleSubmit","registerField","register","unregisterField","unregister","useEffect","observer","MutationObserver","mutations","mutationInstance","termsOfUseLink","document","querySelector","privacyPolicy","setAttribute","style","color","fontWeight","textDecoration","innerHTML","disconnect","observe","attributes","childList","subtree","body","classList","add","remove","_jsx","displayInfo","headerNode","infoNode","id","className","children","_jsxs","href","loginUrl","onSubmit","_values","event","target","submit","action","registrationAction","method","clsx","printIfExists","_defineProperty","_objectSpread","type","placeholder","autoComplete","defaultValue","_Fragment","checked","onChange","Object","keys","length","ref","htmlFor","message","onClick","window","history","back"],"sourceRoot":""}