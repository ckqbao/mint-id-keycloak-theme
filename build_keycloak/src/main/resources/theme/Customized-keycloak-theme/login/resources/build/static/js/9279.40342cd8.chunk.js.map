{"version":3,"file":"static/js/9279.40342cd8.chunk.js","mappings":"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","sources":["login/pages/RegisterUserProfile.tsx"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nimport mintCampusLogo from \"../assets/MINT-Campus-Logo.png\";\nimport mintVernetztLogo from \"../assets/Mintvernetzt-Logo.png\";\n\nexport default function RegisterUserProfile(\n  props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>\n) {\n  const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n  const agreementLabelRef = useRef(null);\n\n  const [agreementChecked, setAgreementChecked] = useState(false);\n\n  const { getClassName } = useGetClassName({\n    doUseDefaultCss,\n    classes,\n  });\n\n  const {\n    url,\n    messagesPerField,\n    realm,\n    passwordRequired,\n    recaptchaRequired,\n    recaptchaSiteKey,\n  } = kcContext;\n\n  const { msg, msgStr } = i18n;\n  const { registrationEmailAsUsername } = realm;\n\n  const { attributesWithPassword, formValidationState: { fieldStateByAttributeName }, } = useFormValidation({ kcContext, i18n });\n  const organizationNameAttribute = attributesWithPassword.find(attr => attr.name === 'organizationName')\n\n  const schema = useMemo(\n    () =>\n      yup.object({\n        firstName: yup.string().required(msgStr(\"error-empty\")),\n        lastName: yup.string().required(msgStr(\"error-empty\")),\n        organizationName: yup.string(),\n        email: yup\n          .string()\n          .email(msgStr(\"error-invalid-email\"))\n          .required(msgStr(\"error-empty\")),\n        username: registrationEmailAsUsername ? yup.string() : yup.string().required(msgStr(\"error-empty\")),\n        password: yup.string().required(msgStr(\"error-empty\")),\n        \"password-confirm\": yup\n          .string()\n          .required(msgStr(\"error-empty\"))\n          .oneOf([yup.ref(\"password\")], \"Your passwords do not match.\"),\n      }),\n    [registrationEmailAsUsername]\n  );\n\n  const {\n    formState: { errors, isDirty },\n    handleSubmit,\n    register: registerField,\n    unregister: unregisterField,\n  } = useForm({\n    defaultValues: {\n      firstName: fieldStateByAttributeName[\"firstName\"]?.value ?? \"\",\n      lastName: fieldStateByAttributeName[\"lastName\"]?.value ?? \"\",\n      organizationName: fieldStateByAttributeName[\"organizationName\"]?.value ?? \"\",\n      email: fieldStateByAttributeName[\"email\"]?.value ?? \"\",\n      username: registrationEmailAsUsername ? undefined : (fieldStateByAttributeName[\"username\"]?.value ?? \"\"),\n      password: \"\",\n      \"password-confirm\": \"\",\n    },\n    resolver: yupResolver(schema),\n  });\n\n  useEffect(() => {\n    const observer = new MutationObserver((mutations, mutationInstance) => {\n      const termsOfUseLink =\n        document.querySelector<HTMLAnchorElement>(\"a#terms-of-use\");\n      const privacyPolicy =\n        document.querySelector<HTMLAnchorElement>(\"a#privacy-policy\");\n      if (termsOfUseLink && privacyPolicy) {\n        termsOfUseLink.setAttribute(\"href\", \"https://mintcampus.org/nutzungsbedingungen/\");\n        termsOfUseLink.setAttribute(\"target\", \"_blank\");\n        termsOfUseLink.style.color = \"#252131\";\n        termsOfUseLink.style.fontWeight = \"bold\";\n        termsOfUseLink.style.textDecoration = \"underline\";\n        termsOfUseLink.innerHTML = msgStr(\"termsTitle\");\n\n        privacyPolicy.setAttribute(\"href\", \"https://mintcampus.org/datenschutzerklaerung/\");\n        privacyPolicy.setAttribute(\"target\", \"_blank\");\n        privacyPolicy.style.color = \"#252131\";\n        privacyPolicy.style.fontWeight = \"bold\";\n        privacyPolicy.style.textDecoration = \"underline\";\n        privacyPolicy.innerHTML = msgStr(\"privacyPolicyTitle\");\n\n        mutationInstance.disconnect();\n      }\n    });\n    observer.observe(document, {\n      attributes: true,\n      childList: true,\n      subtree: true,\n    });\n\n    document.body.classList.add(\"register\");\n\n    return () => {\n      observer.disconnect();\n      document.body.classList.remove(\"register\");\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!registrationEmailAsUsername) {\n      registerField(\"username\");\n    } else {\n      unregisterField(\"username\");\n    }\n  }, [registrationEmailAsUsername, registerField, unregisterField]);\n\n  const submit: SubmitHandler<yup.InferType<typeof schema>> = (_values, event) => {\n    event?.target.submit()\n  };\n\n  return (\n    <>\n      <Template\n        {...{ kcContext, i18n, doUseDefaultCss, classes }}\n        displayInfo\n        headerNode={msg(\"registerTitle\")}\n        infoNode={\n          <div id=\"back-to-login\">\n            <span>\n              {msg(\"alreadyHaveAccount\")}\n              <a href={url.loginUrl}>{msg(\"doLogIn\")}</a>\n            </span>\n          </div>\n        }\n      >\n        <form\n          id=\"kc-register-form\"\n          className={getClassName(\"kcFormClass\")}\n          onSubmit={handleSubmit(submit)}\n          action={url.registrationAction}\n          method=\"post\"\n        >\n          <div\n            className={clsx(\n              getClassName(\"kcFormGroupClass\"),\n              messagesPerField.printIfExists(\n                \"firstName\",\n                getClassName(\"kcFormGroupErrorClass\")\n              ),\n              {\n                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.firstName,\n              }\n            )}\n          >\n            <div className={getClassName(\"kcInputWrapperClass\")}>\n              <input\n                {...registerField(\"firstName\")}\n                type=\"text\"\n                id=\"firstName\"\n                className={getClassName(\"kcInputClass\")}\n                placeholder={msgStr(\"firstName\") + \"*\"}\n              />\n            </div>\n          </div>\n\n          <div\n            className={clsx(\n              getClassName(\"kcFormGroupClass\"),\n              messagesPerField.printIfExists(\n                \"lastName\",\n                getClassName(\"kcFormGroupErrorClass\")\n              ),\n              {\n                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.lastName,\n              }\n            )}\n          >\n            <div className={getClassName(\"kcInputWrapperClass\")}>\n              <input\n                {...registerField(\"lastName\")}\n                type=\"text\"\n                id=\"lastName\"\n                className={getClassName(\"kcInputClass\")}\n                placeholder={msgStr(\"lastName\") + \"*\"}\n              />\n            </div>\n          </div>\n          {!!organizationNameAttribute && (\n          <div\n            className={clsx(\n              getClassName(\"kcFormGroupClass\"),\n              messagesPerField.printIfExists(\n                \"organizationName\",\n                getClassName(\"kcFormGroupErrorClass\")\n              )\n            )}\n          >\n            <div className={getClassName(\"kcInputWrapperClass\")}>\n              <input\n                {...registerField(\"organizationName\")}\n                type=\"text\"\n                id=\"organizationName\"\n                className={getClassName(\"kcInputClass\")}\n                placeholder={msgStr(\"organizationName\")}\n              />\n            </div>\n          </div>\n          )}\n          <div\n            className={clsx(\n              getClassName(\"kcFormGroupClass\"),\n              messagesPerField.printIfExists(\n                \"email\",\n                getClassName(\"kcFormGroupErrorClass\")\n              ),\n              {\n                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.email,\n              }\n            )}\n          >\n            <div className={getClassName(\"kcInputWrapperClass\")}>\n              <input\n                {...registerField(\"email\")}\n                type=\"text\"\n                id=\"email\"\n                className={getClassName(\"kcInputClass\")}\n                autoComplete=\"email\"\n                placeholder={msgStr(\"email\") + \"*\"}\n              />\n            </div>\n          </div>\n          {!realm.registrationEmailAsUsername && (\n            <div\n              className={clsx(\n                getClassName(\"kcFormGroupClass\"),\n                messagesPerField.printIfExists(\n                  \"username\",\n                  getClassName(\"kcFormGroupErrorClass\")\n                ),\n                {\n                  [getClassName(\"kcFormGroupErrorClass\")]: !!errors.username,\n                }\n              )}\n            >\n              <div className={getClassName(\"kcInputWrapperClass\")}>\n                <input\n                  {...registerField(\"username\")}\n                  type=\"text\"\n                  id=\"username\"\n                  className={getClassName(\"kcInputClass\")}\n                  name=\"username\"\n                  defaultValue=\"\"\n                  autoComplete=\"username\"\n                  placeholder={msgStr(\"username\") + \"*\"}\n                />\n              </div>\n            </div>\n          )}\n          {passwordRequired && (\n            <>\n              <div\n                className={clsx(\n                  getClassName(\"kcFormGroupClass\"),\n                  messagesPerField.printIfExists(\n                    \"password\",\n                    getClassName(\"kcFormGroupErrorClass\")\n                  ),\n                  {\n                    [getClassName(\"kcFormGroupErrorClass\")]: !!errors.password,\n                  }\n                )}\n              >\n                <div className={getClassName(\"kcInputWrapperClass\")}>\n                  <input\n                    {...registerField(\"password\")}\n                    type=\"password\"\n                    id=\"password\"\n                    className={getClassName(\"kcInputClass\")}\n                    autoComplete=\"new-password\"\n                    placeholder={msgStr(\"password\") + \"*\"}\n                  />\n                </div>\n              </div>\n\n              <div\n                className={clsx(\n                  getClassName(\"kcFormGroupClass\"),\n                  messagesPerField.printIfExists(\n                    \"password-confirm\",\n                    getClassName(\"kcFormGroupErrorClass\")\n                  ),\n                  {\n                    [getClassName(\"kcFormGroupErrorClass\")]:\n                      !!errors[\"password-confirm\"],\n                  }\n                )}\n              >\n                <div className={getClassName(\"kcInputWrapperClass\")}>\n                  <input\n                    {...registerField(\"password-confirm\")}\n                    type=\"password\"\n                    id=\"password-confirm\"\n                    className={getClassName(\"kcInputClass\")}\n                    placeholder={msgStr(\"passwordConfirm\") + \"*\"}\n                  />\n                </div>\n              </div>\n            </>\n          )}\n          <div className={getClassName(\"kcFormGroupClass\")}>\n            <div className={getClassName(\"kcInputWrapperClass\")}>\n              <div id=\"kc-agreement\">\n                <div>\n                  <input\n                    id=\"agreement\"\n                    name=\"agreement\"\n                    type=\"checkbox\"\n                    checked={agreementChecked}\n                    onChange={(event) =>\n                      setAgreementChecked(event.target.checked)\n                    }\n                    required={isDirty && !Object.keys(errors).length}\n                  />\n                </div>\n                <div>\n                  <label ref={agreementLabelRef} htmlFor=\"agreement\">\n                    {msg(\"registerTermsAgreement\")}{\" \"}\n                    {msg(\"registerPrivacyPolicyAgreement\")}\n                  </label>\n                </div>\n              </div>\n            </div>\n          </div>\n          {recaptchaRequired && (\n            <div className=\"form-group\">\n              <div className={getClassName(\"kcInputWrapperClass\")}>\n                <div\n                  className=\"g-recaptcha\"\n                  data-size=\"compact\"\n                  data-sitekey={recaptchaSiteKey}\n                ></div>\n              </div>\n            </div>\n          )}\n          {!!Object.keys(errors).length && (\n            <div className=\"kcFormError\">\n              {errors.firstName?.message ??\n                errors.lastName?.message ??\n                errors.email?.message ??\n                errors.password?.message ??\n                errors[\"password-confirm\"]?.message ??\n                \"\"}\n            </div>\n          )}\n          <div className={getClassName(\"kcFormGroupClass\")}>\n            <div\n              id=\"kc-form-buttons\"\n              className={getClassName(\"kcFormButtonsClass\")}\n            >\n              <button\n                className={clsx(\n                  getClassName(\"kcButtonClass\"),\n                  getClassName(\"kcButtonPrimaryClass\")\n                )}\n                id=\"kc-register\"\n                type=\"submit\"\n              >\n                {msgStr(\"doRegister\")}\n              </button>\n              <button\n                className={clsx(\n                  getClassName(\"kcButtonClass\"),\n                  getClassName(\"kcButtonDefaultClass\")\n                )}\n                onClick={() => window.history.back()}\n              >\n                {msgStr(\"doCancel\")}\n              </button>\n            </div>\n          </div>\n        </form>\n      </Template>\n      <div className=\"kcRegisterBanner\">\n        <span>{msgStr(\"registerBanner\")}</span>\n        <div style={{ display: 'flex', gap: '23px', alignItems: 'center', justifyContent: 'center', marginTop: '30px', marginBottom: '30px' }}>\n          <img src={mintVernetztLogo} alt=\"mint-vernetzt\" />\n          <img src={mintCampusLogo} alt=\"mint-campus\" />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["RegisterUserProfile","props","_fieldStateByAttribut","_fieldStateByAttribut2","_fieldStateByAttribut3","_fieldStateByAttribut4","_fieldStateByAttribut5","_fieldStateByAttribut6","_fieldStateByAttribut7","_fieldStateByAttribut8","_fieldStateByAttribut9","_fieldStateByAttribut10","_ref","_ref2","_ref3","_ref4","_errors$firstName$mes","_errors$firstName","_errors$lastName","_errors$email","_errors$password","_errors$passwordConf","kcContext","i18n","doUseDefaultCss","Template","classes","agreementLabelRef","useRef","_useState","useState","_useState2","_slicedToArray","agreementChecked","setAgreementChecked","getClassName","useGetClassName","url","messagesPerField","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","registrationEmailAsUsername","_useFormValidation","useFormValidation","attributesWithPassword","fieldStateByAttributeName","formValidationState","organizationNameAttribute","find","attr","name","schema","useMemo","yup","firstName","required","lastName","organizationName","email","username","password","oneOf","_useForm","useForm","defaultValues","value","undefined","resolver","yupResolver","_useForm$formState","formState","errors","isDirty","handleSubmit","registerField","register","unregisterField","unregister","useEffect","observer","MutationObserver","mutations","mutationInstance","termsOfUseLink","document","querySelector","privacyPolicy","setAttribute","style","color","fontWeight","textDecoration","innerHTML","disconnect","observe","attributes","childList","subtree","body","classList","add","remove","_jsxs","_Fragment","children","_jsx","displayInfo","headerNode","infoNode","id","href","loginUrl","className","onSubmit","_values","event","target","submit","action","registrationAction","method","clsx","printIfExists","_defineProperty","_objectSpread","type","placeholder","autoComplete","defaultValue","checked","onChange","Object","keys","length","ref","htmlFor","message","onClick","window","history","back","display","gap","alignItems","justifyContent","marginTop","marginBottom","src","mintVernetztLogo","alt","mintCampusLogo"],"sourceRoot":""}