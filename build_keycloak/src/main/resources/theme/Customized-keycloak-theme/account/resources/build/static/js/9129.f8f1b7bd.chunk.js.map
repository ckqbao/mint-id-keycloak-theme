{"version":3,"file":"static/js/9129.f8f1b7bd.chunk.js","mappings":"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","sources":["login/pages/Register.tsx","../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/login/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/clsx.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/tsafe/src/typeGuard.ts"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nimport mintCampusLogo from \"../assets/MINT-Campus-Logo.png\";\nimport mintVernetztLogo from \"../assets/Mintvernetzt-Logo.png\";\n\nexport default function Register(\n    props: PageProps<Extract<KcContext, { pageId: \"register.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const agreementLabelRef = useRef(null);\n\n    const [agreementChecked, setAgreementChecked] = useState(false);\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes,\n    });\n\n    const {\n        url,\n        messagesPerField,\n        register,\n        realm,\n        passwordRequired,\n        recaptchaRequired,\n        recaptchaSiteKey,\n    } = kcContext;\n\n    const { msg, msgStr } = i18n;\n    const { registrationEmailAsUsername } = realm;\n\n    const schema = useMemo(\n        () =>\n            yup.object({\n                firstName: yup.string().required(msgStr(\"error-empty\")),\n                lastName: yup.string().required(msgStr(\"error-empty\")),\n                email: yup\n                    .string()\n                    .email(msgStr(\"error-invalid-email\"))\n                    .required(msgStr(\"error-empty\")),\n                username: registrationEmailAsUsername ? yup.string() : yup.string().required(msgStr(\"error-empty\")),\n                password: yup.string().required(msgStr(\"error-empty\")),\n                \"password-confirm\": yup\n                    .string()\n                    .required(msgStr(\"error-empty\"))\n                    .oneOf([yup.ref(\"password\")], \"Your passwords do not match.\"),\n            }),\n        [registrationEmailAsUsername]\n    );\n\n    const {\n        formState: { errors, isDirty },\n        handleSubmit,\n        register: registerField,\n        unregister: unregisterField,\n    } = useForm({\n        defaultValues: {\n            firstName: register.formData.firstName ?? \"\",\n            lastName: register.formData.lastName ?? \"\",\n            email: register.formData.email ?? \"\",\n            password: \"\",\n            \"password-confirm\": \"\",\n        },\n        resolver: yupResolver(schema),\n    });\n\n    useEffect(() => {\n        const observer = new MutationObserver((mutations, mutationInstance) => {\n            const termsOfUseLink =\n                document.querySelector<HTMLAnchorElement>(\"a#terms-of-use\");\n            const privacyPolicy =\n                document.querySelector<HTMLAnchorElement>(\"a#privacy-policy\");\n            if (termsOfUseLink && privacyPolicy) {\n                termsOfUseLink.setAttribute(\"href\", \"#\");\n                termsOfUseLink.setAttribute(\"target\", \"_blank\");\n                termsOfUseLink.style.color = \"#252131\";\n                termsOfUseLink.style.fontWeight = \"bold\";\n                termsOfUseLink.style.textDecoration = \"underline\";\n                termsOfUseLink.innerHTML = msgStr(\"termsTitle\");\n\n                privacyPolicy.setAttribute(\"href\", \"#\");\n                privacyPolicy.setAttribute(\"target\", \"_blank\");\n                privacyPolicy.style.color = \"#252131\";\n                privacyPolicy.style.fontWeight = \"bold\";\n                privacyPolicy.style.textDecoration = \"underline\";\n                privacyPolicy.innerHTML = msgStr(\"privacyPolicyTitle\");\n\n                mutationInstance.disconnect();\n            }\n        });\n        observer.observe(document, {\n            attributes: true,\n            childList: true,\n            subtree: true,\n        });\n\n        document.body.classList.add(\"register\");\n\n        return () => {\n            observer.disconnect();\n            document.body.classList.remove(\"register\");\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!registrationEmailAsUsername) {\n            registerField(\"username\");\n        } else {\n            unregisterField(\"username\");\n        }\n    }, [registrationEmailAsUsername, registerField, unregisterField]);\n\n    const submit: SubmitHandler<yup.InferType<typeof schema>> = (_values, event) => {\n        event?.target.submit()\n    };\n\n    return (\n        <>\n            <Template\n                {...{ kcContext, i18n, doUseDefaultCss, classes }}\n                displayInfo\n                headerNode={msg(\"registerTitle\")}\n                infoNode={\n                    <div id=\"back-to-login\">\n                        <span>\n                            {msg(\"alreadyHaveAccount\")}\n                            <a href={url.loginUrl}>{msg(\"doLogIn\")}</a>\n                        </span>\n                    </div>\n                }\n            >\n                <form\n                    id=\"kc-register-form\"\n                    className={getClassName(\"kcFormClass\")}\n                    onSubmit={handleSubmit(submit)}\n                    action={url.registrationAction}\n                    method=\"post\"\n                >\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"firstName\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.firstName,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"firstName\")}\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={getClassName(\"kcInputClass\")}\n                                placeholder={msgStr(\"firstName\") + \"*\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"lastName\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.lastName,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"lastName\")}\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={getClassName(\"kcInputClass\")}\n                                placeholder={msgStr(\"lastName\") + \"*\"}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"email\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.email,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"email\")}\n                                type=\"text\"\n                                id=\"email\"\n                                className={getClassName(\"kcInputClass\")}\n                                autoComplete=\"email\"\n                                placeholder={msgStr(\"email\") + \"*\"}\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div\n                            className={clsx(\n                                getClassName(\"kcFormGroupClass\"),\n                                messagesPerField.printIfExists(\n                                    \"username\",\n                                    getClassName(\"kcFormGroupErrorClass\")\n                                ),\n                                {\n                                    [getClassName(\"kcFormGroupErrorClass\")]: !!errors.username,\n                                }\n                            )}\n                        >\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <input\n                                    {...registerField(\"username\")}\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                    placeholder={msgStr(\"username\") + \"*\"}\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div\n                                className={clsx(\n                                    getClassName(\"kcFormGroupClass\"),\n                                    messagesPerField.printIfExists(\n                                        \"password\",\n                                        getClassName(\"kcFormGroupErrorClass\")\n                                    ),\n                                    {\n                                        [getClassName(\"kcFormGroupErrorClass\")]: !!errors.password,\n                                    }\n                                )}\n                            >\n                                <div className={getClassName(\"kcInputWrapperClass\")}>\n                                    <input\n                                        {...registerField(\"password\")}\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        autoComplete=\"new-password\"\n                                        placeholder={msgStr(\"password\") + \"*\"}\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={clsx(\n                                    getClassName(\"kcFormGroupClass\"),\n                                    messagesPerField.printIfExists(\n                                        \"password-confirm\",\n                                        getClassName(\"kcFormGroupErrorClass\")\n                                    ),\n                                    {\n                                        [getClassName(\"kcFormGroupErrorClass\")]:\n                                            !!errors[\"password-confirm\"],\n                                    }\n                                )}\n                            >\n                                <div className={getClassName(\"kcInputWrapperClass\")}>\n                                    <input\n                                        {...registerField(\"password-confirm\")}\n                                        type=\"password\"\n                                        id=\"password-confirm\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        placeholder={msgStr(\"passwordConfirm\") + \"*\"}\n                                    />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    <div className={getClassName(\"kcFormGroupClass\")}>\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div id=\"kc-agreement\">\n                                <div>\n                                    <input\n                                        id=\"agreement\"\n                                        name=\"agreement\"\n                                        type=\"checkbox\"\n                                        checked={agreementChecked}\n                                        onChange={(event) =>\n                                            setAgreementChecked(event.target.checked)\n                                        }\n                                        required={isDirty && !Object.keys(errors).length}\n                                    />\n                                </div>\n                                <div>\n                                    <label ref={agreementLabelRef} htmlFor=\"agreement\">\n                                        {msg(\"registerTermsAgreement\")}{\" \"}\n                                        {msg(\"registerPrivacyPolicyAgreement\")}\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <div\n                                    className=\"g-recaptcha\"\n                                    data-size=\"compact\"\n                                    data-sitekey={recaptchaSiteKey}\n                                ></div>\n                            </div>\n                        </div>\n                    )}\n                    {!!Object.keys(errors).length && (\n                        <div className=\"kcFormError\">\n                            {errors.firstName?.message ??\n                                errors.lastName?.message ??\n                                errors.email?.message ??\n                                errors.password?.message ??\n                                errors[\"password-confirm\"]?.message ??\n                                \"\"}\n                        </div>\n                    )}\n                    <div className={getClassName(\"kcFormGroupClass\")}>\n                        <div\n                            id=\"kc-form-buttons\"\n                            className={getClassName(\"kcFormButtonsClass\")}\n                        >\n                            <button\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonPrimaryClass\")\n                                )}\n                                id=\"kc-register\"\n                                type=\"submit\"\n                            >\n                                {msgStr(\"doRegister\")}\n                            </button>\n                            <button\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonDefaultClass\")\n                                )}\n                                onClick={() => window.history.back()}\n                            >\n                                {msgStr(\"doCancel\")}\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </Template>\n            <div className=\"kcRegisterBanner\">\n                <span>{msgStr(\"registerBanner\")}</span>\n                <div style={{ display: 'flex', gap: '23px', alignItems: 'center', justifyContent: 'center', marginTop: '30px', marginBottom: '30px' }}>\n                    <img src={mintVernetztLogo} alt=\"mint-vernetzt\" />\n                    <img src={mintCampusLogo} alt=\"mint-campus\" />\n                </div>\n            </div>\n        </>\n    );\n}\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n"],"names":["Register","props","_register$formData$fi","_register$formData$la","_register$formData$em","_register$formData$us","_ref","_ref2","_ref3","_ref4","_errors$firstName$mes","_errors$firstName","_errors$lastName","_errors$email","_errors$password","_errors$passwordConf","kcContext","i18n","doUseDefaultCss","Template","classes","agreementLabelRef","useRef","_useState","useState","_useState2","_slicedToArray","agreementChecked","setAgreementChecked","getClassName","useGetClassName","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","registrationEmailAsUsername","schema","useMemo","yup","firstName","required","lastName","email","username","password","oneOf","_useForm","useForm","defaultValues","formData","resolver","yupResolver","_useForm$formState","formState","errors","isDirty","handleSubmit","registerField","unregisterField","unregister","useEffect","observer","MutationObserver","mutations","mutationInstance","termsOfUseLink","document","querySelector","privacyPolicy","setAttribute","style","color","fontWeight","textDecoration","innerHTML","disconnect","observe","attributes","childList","subtree","body","classList","add","remove","_jsxs","_Fragment","children","_jsx","displayInfo","headerNode","infoNode","id","href","loginUrl","className","onSubmit","_values","event","target","submit","action","registrationAction","method","clsx","printIfExists","_defineProperty","_objectSpread","type","placeholder","autoComplete","name","defaultValue","checked","onChange","Object","keys","length","ref","htmlFor","message","onClick","window","history","back","display","gap","alignItems","justifyContent","marginTop","marginBottom","src","mintVernetztLogo","alt","mintCampusLogo","createUseClassName","params","defaultClasses","useConstCallback","classKey","undefined","len","arguments","i","cls","arg","toAdd","Array","isArray","apply","_toConsumableArray","k","assert","typeGuard","obj","key","value","defineProperty","enumerable","configurable","writable","_toPropertyKey","input","hint","prim","Symbol","toPrimitive","res","call","TypeError","String","Number","_value","isMatched"],"sourceRoot":""}