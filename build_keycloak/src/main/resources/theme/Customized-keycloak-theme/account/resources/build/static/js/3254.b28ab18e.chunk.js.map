{"version":3,"file":"static/js/3254.b28ab18e.chunk.js","mappings":"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","sources":["login/pages/Register.tsx"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport * as yup from \"yup\";\n\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nimport mintCampusLogo from \"../assets/MINT-Campus-Logo.png\";\nimport mintVernetztLogo from \"../assets/Mintvernetzt-Logo.png\";\n\nexport default function Register(\n    props: PageProps<Extract<KcContext, { pageId: \"register.ftl\" }>, I18n>\n) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const agreementLabelRef = useRef(null);\n\n    const [agreementChecked, setAgreementChecked] = useState(false);\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes,\n    });\n\n    const {\n        url,\n        messagesPerField,\n        register,\n        realm,\n        passwordRequired,\n        recaptchaRequired,\n        recaptchaSiteKey,\n    } = kcContext;\n\n    const { msg, msgStr } = i18n;\n    const { registrationEmailAsUsername } = realm;\n\n    const schema = useMemo(\n        () =>\n            yup.object({\n                firstName: yup.string().required(msgStr(\"error-empty\")),\n                lastName: yup.string().required(msgStr(\"error-empty\")),\n                user: yup.object({\n                    attributes: yup.object({\n                        organizationName: yup.string(),\n                    })\n                }),\n                email: yup\n                    .string()\n                    .email(msgStr(\"error-invalid-email\"))\n                    .required(msgStr(\"error-empty\")),\n                username: yup.string().required(msgStr(\"error-empty\")),\n                password: yup.string().required(msgStr(\"error-empty\")),\n                \"password-confirm\": yup\n                    .string()\n                    .required(msgStr(\"error-empty\"))\n                    .oneOf([yup.ref(\"password\")], \"Your passwords do not match.\"),\n            }),\n        []\n    );\n\n    const {\n        formState: { errors },\n        handleSubmit,\n        register: registerField,\n        unregister: unregisterField,\n    } = useForm({\n        defaultValues: {\n            firstName: register.formData.firstName ?? \"\",\n            lastName: register.formData.lastName ?? \"\",\n            user: {\n                attributes: {\n                    organizationName: \"\",\n                }\n            },\n            email: register.formData.email ?? \"\",\n            password: \"\",\n            \"password-confirm\": \"\",\n        },\n        resolver: yupResolver(schema),\n    });\n\n    useEffect(() => {\n        const observer = new MutationObserver((mutations, mutationInstance) => {\n            const termsOfUseLink =\n                document.querySelector<HTMLAnchorElement>(\"a#terms-of-use\");\n            const privacyPolicy =\n                document.querySelector<HTMLAnchorElement>(\"a#privacy-policy\");\n            if (termsOfUseLink && privacyPolicy) {\n                termsOfUseLink.setAttribute(\"href\", \"#\");\n                termsOfUseLink.setAttribute(\"target\", \"_blank\");\n                termsOfUseLink.style.color = \"#252131\";\n                termsOfUseLink.style.fontWeight = \"bold\";\n                termsOfUseLink.style.textDecoration = \"underline\";\n                termsOfUseLink.innerHTML = msgStr(\"termsTitle\");\n\n                privacyPolicy.setAttribute(\"href\", \"#\");\n                privacyPolicy.setAttribute(\"target\", \"_blank\");\n                privacyPolicy.style.color = \"#252131\";\n                privacyPolicy.style.fontWeight = \"bold\";\n                privacyPolicy.style.textDecoration = \"underline\";\n                privacyPolicy.innerHTML = msgStr(\"privacyPolicyTitle\");\n\n                mutationInstance.disconnect();\n            }\n        });\n        observer.observe(document, {\n            attributes: true,\n            childList: true,\n            subtree: true,\n        });\n\n        document.body.classList.add(\"register\");\n\n        return () => {\n            observer.disconnect();\n            document.body.classList.remove(\"register\");\n        };\n    }, []);\n\n    useEffect(() => {\n        if (!registrationEmailAsUsername) {\n            registerField(\"username\");\n        } else {\n            unregisterField(\"username\");\n        }\n    }, [registrationEmailAsUsername, registerField, unregisterField]);\n\n    const submit: SubmitHandler<yup.InferType<typeof schema>> = (data) => {\n        console.log(data);\n    };\n\n    return (\n        <>\n            <Template\n                {...{ kcContext, i18n, doUseDefaultCss, classes }}\n                displayInfo\n                headerNode={msg(\"registerTitle\")}\n                infoNode={\n                    <div id=\"back-to-login\">\n                        <span>\n                            {msg(\"alreadyHaveAccount\")}\n                            <a href={url.loginUrl}>{msg(\"doLogIn\")}</a>\n                        </span>\n                    </div>\n                }\n            >\n                {/* <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\"> */}\n                <form\n                    id=\"kc-register-form\"\n                    className={getClassName(\"kcFormClass\")}\n                    onSubmit={handleSubmit(submit)}\n                >\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"firstName\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.firstName,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"firstName\")}\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={getClassName(\"kcInputClass\")}\n                                placeholder={msgStr(\"firstName\") + \"*\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"lastName\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.lastName,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"lastName\")}\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={getClassName(\"kcInputClass\")}\n                                placeholder={msgStr(\"lastName\") + \"*\"}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"email\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.email,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"user.attributes.organizationName\")}\n                                type=\"text\"\n                                id=\"organizationName\"\n                                className={getClassName(\"kcInputClass\")}\n                                placeholder={msgStr(\"organizationName\")}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\n                                \"email\",\n                                getClassName(\"kcFormGroupErrorClass\")\n                            ),\n                            {\n                                [getClassName(\"kcFormGroupErrorClass\")]: !!errors.email,\n                            }\n                        )}\n                    >\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                {...registerField(\"email\")}\n                                type=\"text\"\n                                id=\"email\"\n                                className={getClassName(\"kcInputClass\")}\n                                autoComplete=\"email\"\n                                placeholder={msgStr(\"email\") + \"*\"}\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div\n                            className={clsx(\n                                getClassName(\"kcFormGroupClass\"),\n                                messagesPerField.printIfExists(\n                                    \"username\",\n                                    getClassName(\"kcFormGroupErrorClass\")\n                                ),\n                                {\n                                    [getClassName(\"kcFormGroupErrorClass\")]: !!errors.username,\n                                }\n                            )}\n                        >\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <input\n                                    {...registerField(\"username\")}\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                    placeholder={msgStr(\"username\") + \"*\"}\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div\n                                className={clsx(\n                                    getClassName(\"kcFormGroupClass\"),\n                                    messagesPerField.printIfExists(\n                                        \"password\",\n                                        getClassName(\"kcFormGroupErrorClass\")\n                                    ),\n                                    {\n                                        [getClassName(\"kcFormGroupErrorClass\")]: !!errors.password,\n                                    }\n                                )}\n                            >\n                                <div className={getClassName(\"kcInputWrapperClass\")}>\n                                    <input\n                                        {...registerField(\"password\")}\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        autoComplete=\"new-password\"\n                                        placeholder={msgStr(\"password\") + \"*\"}\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={clsx(\n                                    getClassName(\"kcFormGroupClass\"),\n                                    messagesPerField.printIfExists(\n                                        \"password-confirm\",\n                                        getClassName(\"kcFormGroupErrorClass\")\n                                    ),\n                                    {\n                                        [getClassName(\"kcFormGroupErrorClass\")]:\n                                            !!errors[\"password-confirm\"],\n                                    }\n                                )}\n                            >\n                                <div className={getClassName(\"kcInputWrapperClass\")}>\n                                    <input\n                                        {...registerField(\"password-confirm\")}\n                                        type=\"password\"\n                                        id=\"password-confirm\"\n                                        className={getClassName(\"kcInputClass\")}\n                                        placeholder={msgStr(\"passwordConfirm\") + \"*\"}\n                                    />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    <div className={getClassName(\"kcFormGroupClass\")}>\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div id=\"kc-agreement\">\n                                <div>\n                                    <input\n                                        id=\"agreement\"\n                                        name=\"agreement\"\n                                        type=\"checkbox\"\n                                        checked={agreementChecked}\n                                        onChange={(event) =>\n                                            setAgreementChecked(event.target.checked)\n                                        }\n                                        required={!!Object.keys(errors).length}\n                                    />\n                                </div>\n                                <div>\n                                    <label ref={agreementLabelRef} htmlFor=\"agreement\">\n                                        {msg(\"registerTermsAgreement\")}{\" \"}\n                                        {msg(\"registerPrivacyPolicyAgreement\")}\n                                    </label>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <div\n                                    className=\"g-recaptcha\"\n                                    data-size=\"compact\"\n                                    data-sitekey={recaptchaSiteKey}\n                                ></div>\n                            </div>\n                        </div>\n                    )}\n                    {!!Object.keys(errors).length && (\n                        <div className=\"kcFormError\">\n                            {errors.firstName?.message ??\n                                errors.lastName?.message ??\n                                errors.email?.message ??\n                                errors.password?.message ??\n                                errors[\"password-confirm\"]?.message ??\n                                \"\"}\n                        </div>\n                    )}\n                    <div className={getClassName(\"kcFormGroupClass\")}>\n                        <div\n                            id=\"kc-form-buttons\"\n                            className={getClassName(\"kcFormButtonsClass\")}\n                        >\n                            <button\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonPrimaryClass\")\n                                )}\n                                id=\"kc-register\"\n                                type=\"submit\"\n                            >\n                                {msgStr(\"doRegister\")}\n                            </button>\n                            <button\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonDefaultClass\")\n                                )}\n                                onClick={() => window.history.back()}\n                            >\n                                {msgStr(\"doCancel\")}\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            </Template>\n            <div className=\"kcRegisterBanner\">\n                <span>{msgStr(\"registerBanner\")}</span>\n                <div style={{ display: 'flex', gap: '23px', alignItems: 'center', justifyContent: 'center', marginTop: '30px', marginBottom: '30px' }}>\n                    <img src={mintVernetztLogo} alt=\"mint-vernetzt\" />\n                    <img src={mintCampusLogo} alt=\"mint-campus\" />\n                </div>\n            </div>\n        </>\n    );\n}\n"],"names":["Register","props","_register$formData$fi","_register$formData$la","_register$formData$em","_register$formData$us","_ref","_ref2","_ref3","_ref4","_errors$firstName$mes","_errors$firstName","_errors$lastName","_errors$email","_errors$password","_errors$passwordConf","kcContext","i18n","doUseDefaultCss","Template","classes","agreementLabelRef","useRef","_useState","useState","_useState2","_slicedToArray","agreementChecked","setAgreementChecked","getClassName","useGetClassName","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","registrationEmailAsUsername","schema","useMemo","yup","firstName","required","lastName","user","attributes","organizationName","email","username","password","oneOf","_useForm","useForm","defaultValues","formData","resolver","yupResolver","errors","formState","handleSubmit","registerField","unregisterField","unregister","useEffect","observer","MutationObserver","mutations","mutationInstance","termsOfUseLink","document","querySelector","privacyPolicy","setAttribute","style","color","fontWeight","textDecoration","innerHTML","disconnect","observe","childList","subtree","body","classList","add","remove","_jsxs","_Fragment","children","_jsx","displayInfo","headerNode","infoNode","id","href","loginUrl","className","onSubmit","data","console","log","clsx","printIfExists","_defineProperty","_objectSpread","type","placeholder","autoComplete","name","defaultValue","checked","onChange","event","target","Object","keys","length","ref","htmlFor","message","onClick","window","history","back","display","gap","alignItems","justifyContent","marginTop","marginBottom","src","mintVernetztLogo","alt","mintCampusLogo"],"sourceRoot":""}